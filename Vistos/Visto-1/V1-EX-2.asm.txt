;-------------------------------------------------------------------------------
; MSP430 Assembler Code Template for use with TI Code Composer Studio
;
;
;-------------------------------------------------------------------------------
            .cdecls C,LIST,"msp430.h"       ; Include device header file
            
;-------------------------------------------------------------------------------
            .def    RESET                   ; Export program entry-point to
                                            ; make it known to linker.
;-------------------------------------------------------------------------------
            .text                           ; Assemble into program memory.
            .retain                         ; Override ELF conditional linking
                                            ; and retain current section.
            .retainrefs                     ; And retain any sections that have
                                            ; references to current section.

;-------------------------------------------------------------------------------
RESET       mov.w   #__STACK_END,SP         ; Initialize stackpointer  (0x4400)
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop watchdog timer


;-------------------------------------------------------------------------------
; Main loop here
;-------------------------------------------------------------------------------
EXP1:		MOV		#MSG,R5 		;inicializar R5 com a mensagem em claro
			MOV 	#GSM,R6			;R6 será utilizado como a mensagem cifrada
			CALL	#ENIGMA2
			;
			MOV 	#GSM,R5
			MOV 	#DCF,R6
			CALL 	#ENIGMA2 		;Decifrar
			jmp 	$ 				;travar execução ao retornar da sub-rotina
			NOP

; Função que retorna menor elemento de umvetor
; Recebe:  	R5 = início da mensagem em claro (ponteiro)
; Retorna: 	R6 = mensagem cifrada
; Usa:		R7, R8 = auxiliar
ENIGMA2:		TST.B	0(R5)
				JEQ		FIM_DO_VETOR
				;
				MOV.B	@R5, R8
				SUB.B	#0x41,R8
				MOV.B	RT1(R8),R8
				;
				MOV.B	RF1(R8),R8
				CLR 	R7
RF_LOOP:		CMP.B 	RT1(R7),R8
				JEQ 	RF_FOUND
				INC		R7
				JMP		RF_LOOP
RF_FOUND:		MOV.B	R7, R8
				;
				ADD.B	#0x41,R8
				MOV.B	R8, 0(R6)
				;
				INC 	R6
				INC		R5
				JMP		ENIGMA2
FIM_DO_VETOR:	RET

			.data
; Declaração do vetor passado em aula pelo professor
MSG: 		.byte	"CABECAFEFACAFAD",0	;Mensagem em claro
GSM:		.byte	"XXXXXXXXXXXXXXX",0	;Mensagem cifrada
DCF: 		.byte	"XXXXXXXXXXXXXXX",0 ;Mensagem decifrada
RT1:		.byte	2, 4, 1, 5, 3, 0	;Trama do Rotor
;					A, B, C, D, E, F	;Referência
;					0, 1, 2, 3, 4, 5	;do rotor padrão
RF1:		 .byte 	3, 5, 4, 0, 2, 1 	;Tabela do Refletor

;-------------------------------------------------------------------------------
; Stack Pointer definition
;-------------------------------------------------------------------------------
            .global __STACK_END
            .sect   .stack
            
;-------------------------------------------------------------------------------
; Interrupt Vectors
;-------------------------------------------------------------------------------
            .sect   ".reset"                ; MSP430 RESET Vector
            .short  RESET
            
